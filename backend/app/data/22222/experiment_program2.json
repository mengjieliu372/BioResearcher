{
    "Part 1": {
        "Part 1": "Sample Collection and Preparation",
        "step 1": {
            "implementation details": "I. Data Download from Recount3 and other public databases:\n1. Download raw gene counts for tumor and normal tissue samples from the Recount3 R package (version 1.0).\n2. Ensure the raw reads from multiple sources, including cancer and non-diseased tissues generated by the TCGA and the Genotype-Tissue Expression Project (GTEx), were uniformly processed with a pipeline using STAR (version 2.7.3a) and Megadepth (version 1.0.1) to align and quantify the reads to the UCSC hg38 assembly.\n3. Access and download the raw gene counts using specific commands or code snippets provided in the Recount3 documentation. For example:\nR\nlibrary(recount3)\nproject_info <- available_projects()\n# Download data for TCGA SARC project\ndata_sarc <- create_rse(project = 'TCGA-SARC')\n# Download data for GTEx project\ndata_gtex <- create_rse(project = 'GTEx')\n4. For GEO datasets, download the relevant datasets such as GSE213300, GSE201056, GSE179720, GSE221493, and GSE221492. For example, to download GSE213300:\n# Navigate to the GEO website and search for GSE213300\n# Download the raw and processed data files from the provided links\n5. Handle potential errors during the data download process by checking the integrity of downloaded files using checksums or other verification methods.",
            "Reference Source": {
                "ijms-24-14732": {
                    "Part 1": [
                        "step 1"
                    ]
                }
            }
        },
        "step 2": {
            "implementation details": "II. Selection Criteria for Sarcoma and Normal Tissue Samples:\nA. Criteria for selecting highly differentiated and dedifferentiated liposarcoma samples:\n1. Tumor samples were obtained from the SARC project, belonging to the TCGA consortium.\n2. Normal samples were downloaded from multiple tissue projects of the GTEx consortium and further selected for specific tissue site details (e.g., adipose, uterus, esophagus, stomach, blood vessel, muscle, and skin fibroblasts).\n3. Filter out low-quality and non-primary tumor samples from the sarcoma project based on read alignment statistics (e.g., percentage of aligned reads > 70%) and visual inspection of data distribution. Use tools like FastQC for visual inspection.\n4. The subtype classification was modified according to previous expert pathology reviews, as detailed in the supplementary information of the referenced study. If expert pathology reviews are not available, use alternative methods such as automated classification algorithms based on gene expression profiles.\n5. Prioritize highly differentiated (WDLPS) and dedifferentiated (DDLPS) liposarcoma samples for detailed analysis. Document the criteria and rationale for sample prioritization.",
            "Reference Source": {
                "ijms-24-14732": {
                    "Part 1": [
                        "step 2"
                    ]
                }
            }
        },
        "step 3": {
            "implementation details": "III. Collection of fresh tumor samples, frozen samples, and paraffin sections:\n1. Collect fresh tumor samples from patients undergoing surgery for primary untreated dedifferentiated liposarcoma (DDLPS) (N=11).\n2. For each tumor, identify and separate paired well-differentiated (WD) and dedifferentiated (DD) components during macroscopic examination by pathologists.\n3. Collect additional adipocytic tumors (WDLPS, N=5; lipoma, N=1) and normal adipose tissues (N=5) for comparison.\n4. Process samples immediately after surgery to ensure cell viability. Use standard protocols for tissue preservation, such as snap freezing in liquid nitrogen or fixation in formalin for paraffin embedding. For snap freezing, immerse the tissue in liquid nitrogen immediately after collection and store at -80°C. For formalin fixation, immerse the tissue in 10% neutral buffered formalin for 24 hours, then transfer to 70% ethanol before embedding in paraffin.\n5. Store frozen samples and paraffin sections in appropriate conditions until further processing. Maintain a detailed log of sample collection, processing, and storage conditions, including dates, times, and any deviations from standard protocols.",
            "Reference Source": {
                "41467_2024_Article_52067": {
                    "Part 1": [
                        "step 1"
                    ]
                }
            }
        }
    },
    "Part 2": {
        "Part 2": "RNA Sequencing and Quality Control",
        "step 1": {
            "implementation details": "I. RNA Extraction from collected samples\n1. Collect frozen tumor samples, sarcoma cell lines, and paraffin sections.\n2. For frozen samples and cell lines, use the RNeasy kit (Qiagen) for total RNA extraction following the manufacturer’s protocol.\n   a. Homogenize samples in RLT buffer with β-mercaptoethanol (10 µL/mL).\n   b. Add 70% ethanol to the lysate and apply to the RNeasy spin column.\n   c. Wash with RW1 buffer followed by RPE buffer.\n   d. Elute RNA in RNase-free water.\n3. For paraffin-embedded sections, use the RNeasy FFPE kit (Qiagen) to extract total RNA.\n   a. Deparaffinize sections using xylene and ethanol washes.\n   b. Digest with proteinase K at 56°C for 15 minutes and then at 80°C for 15 minutes.\n   c. Continue with RNA extraction as per the kit protocol.\n4. Perform on-column DNase I treatment (10 U/µL, incubated for 15 minutes at room temperature) for all RNA samples to eliminate genomic DNA contamination.\n5. Quantify RNA using a NanoDrop spectrophotometer and assess RNA integrity using an Agilent 2100 Bioanalyzer. Ensure RNA Integrity Number (RIN) values are >7 for high-quality RNA.\n6. Use the following reagent volumes: 350 µL RLT buffer per 1-2 million cells, 70% ethanol in a 1:1 ratio with the lysate, 700 µL RW1 buffer, 500 µL RPE buffer.",
            "Reference Source": {
                "1-s2.0-S104366182200408X-main": {
                    "Part 1": [
                        "step 1"
                    ]
                },
                "nihms-2028845": {
                    "Part 1": [
                        "step 1"
                    ]
                }
            }
        },
        "step 2": {
            "implementation details": "II. RNA Sequencing on collected samples\nA. Use of Illumina sequencing platform\n1. Use the Illumina NovaSeq 6000 platform for RNA sequencing.\n2. Prepare RNA-seq libraries using the TruSeq Stranded mRNA Library Prep Kit (Illumina) according to the manufacturer’s instructions.\n   a. Perform poly-A selection to enrich for mRNA.\n   b. Fragment cDNA to an average size of 200-300 bp using fragmentation buffer.\n   c. Synthesize first and second strand cDNA.\n   d. Ligate Illumina adapters to cDNA fragments and amplify by PCR using the following conditions: 98°C for 30 seconds, 15 cycles of 98°C for 10 seconds, 60°C for 30 seconds, 72°C for 30 seconds, and a final extension at 72°C for 5 minutes.\n3. Validate library size and concentration using an Agilent 2100 Bioanalyzer and qPCR.\n4. Sequence libraries on the Illumina NovaSeq 6000 platform, generating paired-end reads of 150 bases.\nB. Specific protocols followed for RNA sequencing\n1. Ensure sequencing coverage of at least 50 million reads per sample for bulk RNA-seq and 100,000 reads per cell for single-cell RNA-seq.\n2. Include the following steps for library validation: a. Check the size distribution of the library on an Agilent Bioanalyzer DNA High Sensitivity chip. b. Quantify the library using qPCR with a library quantification kit (e.g., KAPA Library Quantification Kit).",
            "Reference Source": {
                "1-s2.0-S104366182200408X-main": {
                    "Part 1": [
                        "step 2"
                    ]
                },
                "nihms-2028845": {
                    "Part 1": [
                        "step 1"
                    ]
                }
            }
        },
        "step 3": {
            "implementation details": "III. Quality control using FastQC\n1. Perform quality control checks on the raw RNA-sequencing data using FastQC (https://www.bioinformatics.babraham.ac.uk/projects/fastqc/).\n2. Evaluate metrics such as per base sequence quality, GC content, and sequence duplication levels.\n3. Generate FastQC reports for each sample and review to ensure high data quality.\n4. Acceptable quality thresholds: per base sequence quality >20, GC content within 40-60%, and sequence duplication levels <10%.\n5. Interpret FastQC reports: a. Per base sequence quality: Ensure most of the bases have a quality score >20. b. GC content: Check for a normal distribution within the 40-60% range. c. Sequence duplication levels: Low duplication levels (<10%) indicate good library complexity.",
            "Reference Source": {
                "nihms-2028845": {
                    "Part 1": [
                        "step 2"
                    ]
                }
            }
        },
        "step 4": {
            "implementation details": "IV. Removal of low-quality reads using Trimmomatic\n1. Use Trimmomatic (http://www.usadellab.org/cms/?page=trimmomatic) to remove low-quality reads and adapter sequences.\n2. Apply the following parameters: LEADING:3, TRAILING:3, SLIDINGWINDOW:4:15, MINLEN:36.\n3. Ensure that only high-quality reads are retained for further analysis.\n4. If quality issues persist, consider adjusting the SLIDINGWINDOW parameter to SLIDINGWINDOW:4:20 or increasing the MINLEN parameter to MINLEN:50.",
            "Reference Source": {
                "nihms-2028845": {
                    "Part 1": [
                        "step 2"
                    ]
                }
            }
        },
        "step 5": {
            "implementation details": "V. Normalization techniques using RSEM (TPM, RPKM, FPKM)\n1. Use RSEM (https://github.com/deweylab/RSEM) to normalize expression levels.\n   a. Align reads to the reference genome using Bowtie2 with the following command: 'rsem-calculate-expression --bowtie2 --paired-end sample_1.fastq sample_2.fastq reference_name output_name'.\n   b. Estimate gene and isoform expression levels.\n2. Calculate Transcripts Per Million (TPM) for each gene to account for sequencing depth and gene length.\n3. Additionally, calculate Reads Per Kilobase of transcript per Million mapped reads (RPKM) and Fragments Per Kilobase of transcript per Million mapped reads (FPKM) for comparison.\n4. Use log2 transformation (log2(TPM+1)) and z-score normalization for downstream analysis.",
            "Reference Source": {
                "nihms-2028845": {
                    "Part 1": [
                        "step 2"
                    ]
                }
            }
        }
    },
    "Part 3": {
        "Part 3": "Data Preprocessing and Normalization",
        "step 1": {
            "implementation details": "I. Quality control checks on raw RNA-seq data:\n1. Collect raw RNA-seq data from the following datasets: GSE213300, GSE201056, GSE179720, GSE221493, and GSE221492.\n2. Use FastQC (https://www.bioinformatics.babraham.ac.uk/projects/fastqc/) to perform quality control checks on the raw RNA-seq data. Ensure that each sample passes the quality metrics such as per base sequence quality (mean quality score > 20), per sequence GC content (within 40-60%), and sequence duplication levels (less than 20%).\n3. Generate a summary report for each dataset to document the quality control metrics and identify any samples that fail the checks. For samples that fail, consider re-sequencing or excluding them from further analysis.",
            "Reference Source": {
                "nihms-2028845": {
                    "Part 1": [
                        "step 2"
                    ]
                },
                "ijms-24-14732": {
                    "Part 1": [
                        "step 3"
                    ]
                }
            }
        },
        "step 2": {
            "implementation details": "II. Read trimming and filtering:\n1. Use Trimmomatic (http://www.usadellab.org/cms/?page=trimmomatic) to remove low-quality reads and adapter sequences from the raw RNA-seq data.\n2. Set the following parameters for Trimmomatic:\n   - LEADING: 3\n   - TRAILING: 3\n   - SLIDINGWINDOW: 4:15\n   - MINLEN: 36\n3. Ensure that the trimmed reads have high-quality scores and no adapter contamination. Document the number of reads before and after trimming for each dataset. The chosen parameters ensure that reads with low-quality bases at the ends are trimmed, and only reads of sufficient length are retained for analysis.",
            "Reference Source": {
                "nihms-2028845": {
                    "Part 1": [
                        "step 2"
                    ]
                }
            }
        },
        "step 3": {
            "implementation details": "III. Normalization of gene counts using TMM and other methods:\nA. Explanation of TMM and other normalization methods:\n   1. Use the Trimmed Mean of M-values (TMM) method implemented in the edgeR package (version 3.32.1) for normalization. TMM accounts for differences in library sizes and composition by computing scaling factors.\n   2. Additionally, use the voom function in the limma package (version 3.46.0) to transform the normalized counts to log2 counts per million (CPM) and estimate the mean-variance relationship.\nB. Ensuring data comparability across samples and conditions:\n   1. Normalize raw gene counts from the following datasets: GSE213300, GSE201056, GSE179720, GSE221493, and GSE221492.\n   2. Apply the TMM method to account for differences in library sizes and composition.\n   3. Use the voom function to transform the normalized counts to log2 CPM and estimate the mean-variance relationship.\n   4. Justify the choice of normalization methods by explaining how TMM and voom address potential biases and ensure accurate downstream analysis. Document the normalization steps and parameters used. For comparison, consider alternative normalization methods such as DESeq2, and justify the final selection based on data characteristics.",
            "Reference Source": {
                "ijms-24-14732": {
                    "Part 1": [
                        "step 3",
                        "step 4"
                    ]
                }
            }
        },
        "step 4": {
            "implementation details": "IV. Data integration from multiple sources, including public databases and internal samples:\n1. Integrate RNA-seq data from the following datasets: GSE213300, GSE201056, GSE179720, GSE221493, and GSE221492, along with internal samples from 80 cases and single-cell sequencing data from 10 cases.\n2. Use the Celligner tool (https://figshare.com/articles/dataset/Celligner_data/11965269) to align and integrate RNA-seq data from multiple sources.\n3. Perform UMAP clustering on the integrated data to identify clusters based on cancer types and metabolic characteristics. Use the following UMAP parameters: n_neighbors = 50, min_dist = 0.5, metric = 'pearson'.\n4. Ensure that the integration process maintains data comparability and addresses batch effects. Document the integration steps and any parameters used. Consider alternative tools or methods for data integration, such as ComBat for batch effect correction, and justify the final selection based on data characteristics.",
            "Reference Source": {
                "nihms-2028845": {
                    "Part 1": [
                        "step 5"
                    ]
                }
            }
        }
    },
    "Part 4": {
        "Part 4": "Differential Expression Analysis",
        "step 1": {
            "implementation details": "Identification of differentially expressed genes (DEGs) between highly differentiated (WDLPS) and dedifferentiated (DDLPS) liposarcoma using the limma package involves the following steps: \n1. Data Preparation: Import the normalized expression data from RNA-seq datasets GSE213300, GSE201056, GSE179720, GSE221493, and GSE221492, ensuring that samples are correctly labeled as WDLPS or DDLPS. \n2. Design Matrix: Create a design matrix to specify the experimental setup, indicating which samples belong to WDLPS and which to DDLPS. \n3. Model Fitting: Fit a linear model to the expression data using the design matrix. Use the lmFit function with default parameters. \n4. Contrast Matrix: Define contrasts to compare WDLPS against DDLPS using the makeContrasts function. \n5. DEG Identification: Apply empirical Bayes moderation to the fitted model using the eBayes function and extract DEGs based on an adjusted p-value threshold of < 0.05 using the topTable function. \n6. Result Compilation: Compile a list of DEGs with associated statistics, including log fold change and adjusted p-values.",
            "Reference Source": {
                "cancers-15-03360": {
                    "Part 1": [
                        "step 2",
                        "step 3",
                        "step 4"
                    ]
                },
                "41467_2024_Article_52067": {
                    "Part 3": [
                        "step 4"
                    ]
                }
            }
        },
        "step 2": {
            "implementation details": "Functional Annotation of Differentially Activated Circuits involves performing Gene Ontology (GO) enrichment analysis on the identified DEGs. \n1. Gene List Preparation: Extract the list of significant DEGs identified in Step 1. \n2. GO Enrichment Analysis: Use Toppfun to perform GO enrichment analysis. \n   - Go to the Toppfun website (https://toppgene.cchmc.org/enrichment.jsp). \n   - Upload the list of DEGs. \n   - Select 'Gene Ontology' and choose Biological Process, Molecular Function, and Cellular Component. \n   - Set the significance level for enrichment to an adjusted p-value < 0.05. \n3. Pathway Identification: Identify key pathways and circuits that are differentially activated in WDLPS and DDLPS, emphasizing metabolic pathways.",
            "Reference Source": "cancers-15-03360: Part 1, step 6"
        },
        "step 3": {
            "implementation details": "Visualization of Differential Expression Results includes creating visual representations to aid interpretation and communication of findings. \n1. Volcano Plot: Generate a volcano plot to display the DEGs, highlighting those with significant p-values and fold changes. Use tools like GraphPad Prism or R package ggplot2. \n2. Heatmap: Create a heatmap of the top DEGs to visualize expression patterns across samples. Use tools like R package pheatmap or ComplexHeatmap. \n3. Pathway Diagrams: Use software tools like Cytoscape or PathVisio to generate diagrams illustrating the enriched metabolic pathways identified in Step 2.",
            "Reference Source": "cancers-15-03360: Part 1, step 5"
        },
        "step 4": {
            "implementation details": "Discussion of Biological Significance of Findings involves interpreting the results in a biological context. \n1. Annotation of Metabolic Pathways: Discuss the relevance of differentially expressed metabolic pathways in the context of liposarcoma differentiation. Use resources like KEGG and Reactome for pathway information. \n2. Biological Implications: Explore the potential biological implications of the findings, such as the role of identified pathways in tumor progression or treatment resistance. \n3. Future Directions: Suggest future experiments or analyses that could further elucidate the role of these pathways in liposarcoma. Consider using additional datasets or single-cell sequencing data for more detailed insights.",
            "Reference Source": "41467_2024_Article_52067: Part 3, step 5"
        }
    },
    "Part 5": {
        "Part 5": "Pathway Enrichment and Functional Annotation",
        "step 1": {
            "implementation details": "I. Calculation of Pathway Activity Scores across Different Cancer Types: \n1. Collect RNA-seq data from the datasets GSE213300, GSE201056, GSE179720, GSE221493, and GSE221492, including both bulk and single-cell RNA-seq data from liposarcoma samples. \n2. Normalize the gene expression data using the TMM method as implemented in the edgeR package to ensure comparability across samples. \n3. Calculate pathway activity scores using the GSVA package (version 1.38.2) for each sample. Use KEGG pathway gene sets from the MSigDB database (version 7.4) to define the pathways. Set parameters for the GSVA function, such as method='ssgsea' and mx.diff=TRUE, to calculate enrichment scores. \n4. Aggregate pathway activity scores across different cancer types, focusing on highly differentiated (WDLPS) and dedifferentiated (DDLPS) liposarcoma samples. Use statistical methods such as ANOVA to compare pathway activity scores between groups. Specify ANOVA settings, including the use of post-hoc tests like Tukey's HSD for multiple comparisons. \n5. Validate the pathway activity scores by comparing them with known pathway activity patterns in the literature, using correlation analysis or other statistical validation methods. Include specific references or criteria for validation.",
            "Reference Source": {
                "ijms-24-14732": {
                    "Part 5": [
                        "step 1"
                    ]
                }
            }
        },
        "step 2": {
            "implementation details": "II. Pathway enrichment analysis using KEGG pathways: \n1. Use the DEGs identified in Part 4 from datasets GSE213300, GSE201056, GSE179720, GSE221493, and GSE221492. \n2. Perform pathway enrichment analysis using the clusterProfiler package (version 3.18.1) to identify KEGG pathways significantly enriched in DEGs. \n3. Set the significance threshold for pathway enrichment at an adjusted p-value < 0.05 using the Benjamini-Hochberg method for multiple testing correction. \n4. Focus on pathways related to metabolism, cell cycle, and signal transduction. \n5. Validate the enriched pathways by cross-referencing with known pathways in the KEGG database and related literature. Include detailed comparison with known metabolic pathways involved in liposarcoma differentiation.",
            "Reference Source": "ijms-24-14732, Part 5"
        },
        "step 3": {
            "implementation details": "III. Functional annotation of DEGs to identify key metabolic pathways: \n1. Annotate the DEGs using the org.Hs.eg.db package (version 3.12.0) to map gene symbols to Entrez IDs. \n2. Use the enrichR package (version 3.0) to perform Gene Ontology (GO) enrichment analysis, focusing on biological processes related to metabolism. \n3. Identify key metabolic pathways that are overrepresented in DEGs, highlighting those involved in lipid metabolism, gluconeogenesis, and energy production. \n4. Validate the functional annotation results by comparing them with known metabolic processes and pathways from the literature and relevant databases. Include specific hypotheses about the role of these pathways in liposarcoma differentiation and potential therapeutic targets.",
            "Reference Source": "ijms-24-14732, Part 5"
        }
    },
    "Part 6": {
        "Part 6": "Integration of Single-Cell and Bulk RNA-seq Data",
        "step 1": {
            "implementation details": "I. Integration and clustering of single-cell RNA-seq data:\n\n**Overview:** This step involves preprocessing, integrating, and clustering single-cell RNA-seq data to analyze tumor heterogeneity.\n\n1. **Data Preprocessing:**\n   - Load the single-cell RNA-seq data from the GSE221493 dataset.\n   - Normalize the data using the SCTransform function in Seurat (version 4.1.0) to adjust for sequencing depth and other technical variations.\n   - Example command: `seurat_object <- SCTransform(seurat_object)`.\n   - **Note:** SCTransform helps in reducing technical noise and improving the detection of biological signals.\n\n2. **Dimensionality Reduction:**\n   - Perform principal component analysis (PCA) on the 3000 most variable genes to reduce dimensionality.\n   - Example command: `seurat_object <- RunPCA(seurat_object, features = VariableFeatures(object = seurat_object))`.\n   - **Rationale:** PCA helps in identifying the most significant features that capture the variance in the data.\n\n3. **Batch Effect Correction:**\n   - Use the Harmony package (version 0.1.0) to integrate datasets from multiple samples, correcting for batch effects.\n   - Parameters: theta=2, lambda=1, nclust=50.\n   - Example command: `seurat_object <- RunHarmony(seurat_object, group.by.vars = 'batch', theta = 2, lambda = 1, nclust = 50)`.\n   - **Note:** Harmony aligns datasets to a shared space, facilitating integration across batches.\n\n4. **Visualization:**\n   - Calculate UMAP dimensions on the first 50 PCA components for visualization.\n   - Example command: `seurat_object <- RunUMAP(seurat_object, dims = 1:50)`.\n   - **Purpose:** UMAP provides a visual representation of data clusters in two dimensions.\n\n5. **Clustering:**\n   - Cluster the integrated data using Seurat’s FindNeighbors and FindClusters functions.\n   - Parameters: resolution=0.8, k.param=20.\n   - Example commands: `seurat_object <- FindNeighbors(seurat_object, dims = 1:50, k.param = 20)` and `seurat_object <- FindClusters(seurat_object, resolution = 0.8)`.\n   - **Validation:** Compare clusters to known marker genes to validate results.\n   - Example command: `FeaturePlot(seurat_object, features = c('marker1', 'marker2'))`.\n\n6. **Troubleshooting:**\n   - If integration issues arise, consider adjusting Harmony parameters or using alternative methods like CCA in Seurat.\n   - **Alternative Tools:** Consider using Scanpy for Python-based analysis if Seurat is unavailable.",
            "Reference Source": {
                "41467_2024_Article_52067": {
                    "Part 1": [
                        "step 6"
                    ],
                    "Part 3": [
                        "step 1",
                        "step 2"
                    ]
                }
            }
        },
        "step 2": {
            "implementation details": "II. Identification of major cellular subfamilies and tumor cell clusters:\n\n1. **Identification of Cellular Subfamilies:**\n   - Use gene expression profiles and canonical markers to identify major cellular subfamilies in the dataset (GSE221493).\n   - Example command: `seurat_object <- AddModuleScore(seurat_object, features = list_of_marker_genes, name = 'subfamily')`.\n   - **Objective:** To categorize cells into subfamilies such as tumor cells, lymphoid cells, myeloid cells, etc.\n\n2. **Grouping Clusters:**\n   - Group identified clusters into main cellular subfamilies using marker gene expression.\n   - Example command: `seurat_object <- subset(seurat_object, idents = c('tumor', 'lymphoid', 'myeloid', 'adipocytes', 'mesothelial'))`.\n\n3. **Tumor Cell Identification:**\n   - Identify tumor cell clusters using overexpression of MDM2 and CDK4, and chromosome 12q amplification as markers (GSE179720).\n   - Example command: `FeaturePlot(seurat_object, features = c('MDM2', 'CDK4'))`.\n\n4. **Validation:**\n   - Validate identified subfamilies and tumor clusters using known literature and additional datasets if available.\n\n5. **Alternative Methods:**\n   - If Seurat is unavailable, consider using other single-cell analysis tools like Monocle or SC3 for clustering and identification.",
            "Reference Source": {
                "41467_2024_Article_52067": {
                    "Part 1": [
                        "step 7"
                    ],
                    "Part 3": [
                        "step 1"
                    ]
                }
            }
        },
        "step 3": {
            "implementation details": "III. Comparison of tumor microenvironment composition:\n\n1. **Proportion Analysis:**\n   - Analyze the relative proportions of each cell cluster in the tumor microenvironment (TME) using single-cell RNA-seq data (GSE221493).\n   - Example command: `table(Idents(seurat_object))`.\n\n2. **Comparative Analysis:**\n   - Compare proportions of tumor and stromal populations between WDLPS and DDLPS samples.\n   - Example command: `prop.table(table(Idents(seurat_object), seurat_object$sample_type))`.\n   - **Objective:** To understand the composition differences in the TME across different liposarcoma types.\n\n3. **Validation Using Bulk Data:**\n   - Validate findings using bulk RNA-seq data from GSE221492 to infer TME composition with MCP counter.\n   - Example command: `MCPcounter::MCPcounter.estimate(expression_data)`.\n   - **Focus:** Assess myeloid and lymphoid cell representation.\n\n4. **Alternative Approaches:**\n   - Consider using other deconvolution tools like CIBERSORT if MCP counter is unavailable.\n\n5. **Troubleshooting:**\n   - If discrepancies arise between single-cell and bulk data, re-evaluate integration and clustering steps for potential errors.",
            "Reference Source": {
                "41467_2024_Article_52067": {
                    "Part 1": [
                        "step 8"
                    ],
                    "Part 3": [
                        "step 3"
                    ]
                }
            }
        },
        "step 4": {
            "implementation details": "IV. Validation using bulk RNA-seq data:\n\n1. **Data Loading and Preparation:**\n   - Load bulk RNA-seq data from GSE221492 for validation of single-cell findings.\n   - Example command: `bulk_data <- read.table('path_to_bulk_data', header = TRUE, sep = '\\t')`.\n\n2. **Hierarchical Clustering:**\n   - Perform hierarchical clustering using the 800 most variant genes to ensure consistency with single-cell clusters.\n   - Example command: `heatmap_data <- bulk_data[order(apply(bulk_data, 1, var), decreasing = TRUE)[1:800], ]`.\n\n3. **Validation of Gene Expression:**\n   - Confirm overexpression of genes related to adipocytic differentiation and stemness in WDLPS, and invasion and angiogenesis in DDLPS.\n   - Example command: `heatmap.2(as.matrix(heatmap_data), trace = 'none', col = bluered(100), scale = 'row')`.\n\n4. **Cross-Validation:**\n   - Compare results with findings from other studies or datasets to ensure validity.\n\n5. **Alternative Tools:**\n   - If hierarchical clustering is not feasible, consider using PCA or t-SNE for dimensionality reduction and visualization.",
            "Reference Source": {
                "41467_2024_Article_52067": {
                    "Part 3": [
                        "step 6"
                    ]
                }
            }
        },
        "step 5": {
            "implementation details": "V. Differential gene expression and pathway analysis at the single-cell level:\n\nA. **Integration Methods:**\n   1. Align single-cell RNA-seq data with bulk RNA-seq data using the Celligner tool to address batch effects and integrate datasets.\n   2. Example command: `integrated_data <- Celligner::align(single_cell_data, bulk_data)`.\n\nB. **Differential Expression Analysis:**\n   1. Identify differentially expressed genes (DEGs) between WDLPS and DDLPS using the integrated dataset.\n   2. Example command: `DEGs <- FindMarkers(integrated_data, ident.1 = 'WDLPS', ident.2 = 'DDLPS')`.\n\nC. **Pathway Enrichment Analysis:**\n   1. Perform pathway enrichment analysis on DEGs using the clusterProfiler package to identify significant metabolic pathways.\n   2. Example command: `enriched_pathways <- enrichKEGG(gene = DEGs$gene, organism = 'hsa')`.\n\nD. **Expected Outcomes:**\n   1. Comprehensive identification of tumor heterogeneity and metabolic pathways involved in liposarcoma differentiation.\n   2. Validation of single-cell findings with bulk RNA-seq data, highlighting key pathways such as TGF-β signaling and lipid metabolism.\n\nE. **Alternative Approaches:**\n   - Consider using other enrichment analysis tools like GSEA for pathway analysis if clusterProfiler is unavailable.",
            "Reference Source": "cancers-15-03360: Part 3"
        }
    }
}